from abc import ABC, abstractmethod

class TransactionMixin:
    def __init__(self):
        self.transacoes = []

    def registrar_transacao(self, descricao, valor):
        self.transacoes.append({"descricao": descricao, "valor": valor})

    def extrato_completo(self):
        extrato = "Histórico de Transações:\n"
        for i, transacao in enumerate(self.transacoes, 1):
            extrato += f"{i}. {transacao['descricao']}: R${transacao['valor']:.2f}\n"
        return extrato

class NotificationMixin:
    def enviar_notificacao(self, mensagem):
        print(f"Notificação: {mensagem}")

class Account(ABC):
    def __init__(self, titular, saldo):
        self.titular = titular
        self.saldo = saldo

    @abstractmethod
    def saque(self, valor):
        pass

    @abstractmethod
    def deposito(self, valor):
        pass

    def extrato(self):
        return f"Titular: {self.titular}, Saldo: R${self.saldo:.2f}"

class ContaCorrente(TransactionMixin, NotificationMixin, Account):
    def __init__(self, titular, saldo, limite):
        Account.__init__(self, titular, saldo)  
        TransactionMixin.__init__(self)  
        NotificationMixin.__init__(self)  
        self.limite = limite

    def saque(self, valor):
        if valor <= self.saldo + self.limite:
            self.saldo -= valor
            self.registrar_transacao("Saque", -valor)
            self.enviar_notificacao(f"Saque de R${valor:.2f} realizado.")
            return f"Saque de R${valor:.2f} realizado com sucesso!"
        else:
            return "Saldo insuficiente para saque."

    def deposito(self, valor):
        self.saldo += valor
        self.registrar_transacao("Depósito", valor)
        self.enviar_notificacao(f"Depósito de R${valor:.2f} realizado.")
        return f"Depósito de R${valor:.2f} realizado com sucesso!"

class ContaPoupanca(TransactionMixin, NotificationMixin, Account):
    def __init__(self, titular, saldo, taxa_juros):
        Account.__init__(self, titular, saldo)  
        TransactionMixin.__init__(self)  
        NotificationMixin.__init__(self)  
        self.taxa_juros = taxa_juros

    def saque(self, valor):
        if valor <= self.saldo:
            self.saldo -= valor
            self.registrar_transacao("Saque", -valor)
            self.enviar_notificacao(f"Saque de R${valor:.2f} realizado.")
            return f"Saque de R${valor:.2f} realizado com sucesso!"
        else:
            return "Saldo insuficiente para saque."

    def deposito(self, valor):
        self.saldo += valor
        self.registrar_transacao("Depósito", valor)
        self.enviar_notificacao(f"Depósito de R${valor:.2f} realizado.")
        return f"Depósito de R${valor:.2f} realizado com sucesso!"

    def aplicar_juros(self):
        juros = self.saldo * self.taxa_juros / 100
        self.saldo += juros
        self.registrar_transacao("Aplicação de Juros", juros)
        return f"Juros aplicados: R${juros:.2f}"

class ContaInvestimento(TransactionMixin, NotificationMixin, Account):
    def __init__(self, titular, saldo, tipo_investimento):
        Account.__init__(self, titular, saldo) 
        TransactionMixin.__init__(self)  
        NotificationMixin.__init__(self)  
        self.tipo_investimento = tipo_investimento

    def saque(self, valor):
        if valor <= self.saldo:
            self.saldo -= valor
            self.registrar_transacao("Saque", -valor)
            self.enviar_notificacao(f"Saque de R${valor:.2f} realizado.")
            return f"Saque de R${valor:.2f} realizado com sucesso!"
        else:
            return "Saldo insuficiente para saque."

    def deposito(self, valor):
        self.saldo += valor
        self.registrar_transacao("Depósito", valor)
        self.enviar_notificacao(f"Depósito de R${valor:.2f} realizado.")
        return f"Depósito de R${valor:.2f} realizado com sucesso!"

    def aplicar_investimento(self):
        if self.tipo_investimento == "alto_rendimento":
            rendimento = self.saldo * 0.10
        elif self.tipo_investimento == "baixo_rendimento":
            rendimento = self.saldo * 0.03
        else:
            rendimento = 0

        self.saldo += rendimento
        self.registrar_transacao(f"Rendimento ({self.tipo_investimento})", rendimento)
        return f"Rendimento de {self.tipo_investimento} aplicado: R${rendimento:.2f}"

def criar_conta():
    print("Escolha o tipo de conta:")
    print("1 - Corrente")
    print("2 - Poupança")
    print("3 - Investimento")

    while True:
        try:
            opcao = int(input("Digite sua Opção: "))
            if opcao in [1, 2, 3]:
                break
            else:
                print("Certifique-se de escolher uma opção válida!\n")
        except ValueError:
            print("Por favor, insira um número válido.\n")

    titular = input("Informe o nome do titular: ").strip()

    while True:
        try:
            saldo_inicial = float(input("Informe o saldo inicial: R$"))
            if saldo_inicial < 0:
                print("O saldo inicial não pode ser negativo!\n")
            else:
                break
        except ValueError:
            print("Por favor, insira um valor numérico válido para o saldo.\n")

    if opcao == 1:
        while True:
            try:
                limite = float(input("Informe o limite de crédito da conta corrente: R$"))
                if limite < 0:
                    print("O limite não pode ser negativo!\n")
                else:
                    break
            except ValueError:
                print("Por favor, insira um valor numérico válido para o limite.\n")
        return ContaCorrente(titular, saldo_inicial, limite)
    elif opcao == 2:
        while True:
            try:
                taxa_juros = float(input("Informe a taxa de juros anual da conta poupança (%): "))
                if taxa_juros < 0:
                    print("A taxa de juros não pode ser negativa!\n")
                else:
                    break
            except ValueError:
                print("Por favor, insira um valor numérico válido para a taxa de juros.\n")
        return ContaPoupanca(titular, saldo_inicial, taxa_juros)
    elif opcao == 3:
        while True:
            tipo_investimento = input("Informe o tipo de investimento (alto_rendimento ou baixo_rendimento): ").lower()
            if tipo_investimento in ["alto_rendimento", "baixo_rendimento"]:
                break
            else:
                print("Tipo de investimento inválido! Escolha 'alto_rendimento' ou 'baixo_rendimento'.\n")
        return ContaInvestimento(titular, saldo_inicial, tipo_investimento)

def operar_conta(conta):
    while True:
        print("\nOpções de operações:")
        print("1 - Depósito")
        print("2 - Saque")
        print("3 - Extrato")
        if isinstance(conta, ContaPoupanca):
            print("4 - Aplicar Juros")
        if isinstance(conta, ContaInvestimento):
            print("4 - Aplicar Investimento")
        if isinstance(conta, TransactionMixin):
            print("5 - Histórico de Transações")
        print("0 - Sair")

        try:
            opcao = int(input("Escolha uma operação: "))
        except ValueError:
            print("Por favor, insira um número válido.")
            continue

        if opcao == 1:
            try:
                valor = float(input("Informe o valor do depósito: R$"))
                if valor <= 0:
                    print("O valor deve ser positivo!\n")
                else:
                    print(conta.deposito(valor))
            except ValueError:
                print("Por favor, insira um valor numérico válido.")
        elif opcao == 2:
            try:
                valor = float(input("Informe o valor do saque: R$"))
                if valor <= 0:
                    print("O valor deve ser positivo!\n")
                else:
                    print(conta.saque(valor))
            except ValueError:
                print("Por favor, insira um valor numérico válido.")
        elif opcao == 3:
            print(conta.extrato())
        elif opcao == 4:
            if isinstance(conta, ContaPoupanca):
                print(conta.aplicar_juros())
            elif isinstance(conta, ContaInvestimento):
                print(conta.aplicar_investimento())
        elif opcao == 5:
            if isinstance(conta, TransactionMixin):
                print(conta.extrato_completo())
        elif opcao == 0:
            break
        else:
            print("Opção inválida! Tente novamente.")

def main():
    conta = criar_conta()
    operar_conta(conta)

main()
